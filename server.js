import express from "express";
import cors from "cors";
import { createClient } from "@supabase/supabase-js";
import dotenv from "dotenv";

dotenv.config();

const app = express();

// –£–ø—Ä–æ—â–µ–Ω–Ω—ã–µ CORS –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
app.use(cors({
  origin: '*', // –†–∞–∑—Ä–µ—à–∞–µ–º –≤—Å–µ –¥–æ–º–µ–Ω—ã
  methods: ["GET", "POST", "OPTIONS"],
  credentials: false,
  allowedHeaders: ["Content-Type", "Authorization", "X-Requested-With"]
}));

app.use(express.json());

// –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Å–µ—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
app.use((req, res, next) => {
  console.log(`${new Date().toISOString()} - ${req.method} ${req.path}`);
  console.log('Headers:', req.headers);
  console.log('Origin:', req.get('Origin'));
  next();
});

const supabase = createClient(
  process.env.SUPABASE_URL,
  process.env.SUPABASE_SERVICE_KEY
);

// –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞
app.get("/", (req, res) => {
  res.send("Server is running! Version 2.0 with auth system");
});

// Webhook Tilda ‚Äî POST
app.post("/tilda-webhook", async (req, res) => {
  try {
    console.log("–ü–æ–ª—É—á–µ–Ω POST /tilda-webhook");
    console.log("–¢–µ–ª–æ –∑–∞–ø—Ä–æ—Å–∞:", req.body);

    // –¢–µ—Å—Ç–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å Tilda
    if (req.body.test) {
      return res.status(200).json({ success: true });
    }

    const { email } = req.body;
    if (!email) {
      return res.status(400).json({ error: "Email –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω" });
    }

    // –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ email
    const { data, error } = await supabase
      .from("users")
      .select("*")
      .eq("email", email)
      .single();

    if (error && error.code === "PGRST116") {
      // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω
      return res.json({ success: true, user: null });
    } else if (error) {
      throw error;
    }

    console.log("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–π–¥–µ–Ω:", data);
    res.json({ success: true, user: data });
  } catch (err) {
    console.error("–û—à–∏–±–∫–∞ webhook:", err.message);
    res.status(500).json({ error: err.message });
  }
});

// POST /auth-sync ‚Äî —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ —Å Tilda
app.post("/auth-sync", async (req, res) => {
  try {
    console.log('POST /auth-sync –∑–∞–ø—Ä–æ—Å:', req.body);
    
    const { email, action, timestamp, source, page } = req.body;
    
    if (!email) {
      return res.status(400).json({ 
        success: false, 
        error: "Email is required" 
      });
    }

    console.log(`üîê –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: ${email} (${action})`);

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –≤ –ø–∞–º—è—Ç–∏ —Å–µ—Ä–≤–µ—Ä–∞
    if (!global.authSessions) {
      global.authSessions = new Map();
    }
    
    global.authSessions.set(email, {
      email,
      action,
      timestamp: timestamp || new Date().toISOString(),
      source: source || 'unknown',
      page: page || 'unknown',
      lastActivity: new Date().toISOString()
    });

    console.log('‚úÖ –°–µ—Å—Å–∏—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞:', email);
    
    // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ Supabase
    const { data: userData, error } = await supabase
      .from("users")
      .select("*")
      .eq("email", email)
      .single();

    let userFound = false;
    if (!error && userData) {
      userFound = true;
      console.log('üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ:', userData);
    } else {
      console.log('‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ:', email);
    }
    
    res.json({ 
      success: true, 
      message: "Auth sync successful",
      email: email,
      userFound: userFound,
      user: userData || null,
      timestamp: new Date().toISOString()
    });

  } catch (err) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –≤ /auth-sync:', err);
    res.status(500).json({ 
      success: false, 
      error: err.message,
      details: "Auth sync failed"
    });
  }
});

// GET /current-user ‚Äî –ø–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
app.get("/current-user", async (req, res) => {
  try {
    console.log('GET /current-user –∑–∞–ø—Ä–æ—Å');
    
    if (!global.authSessions) {
      return res.json({ 
        success: true, 
        user: null,
        message: "No active sessions"
      });
    }

    // –ù–∞—Ö–æ–¥–∏–º –ø–æ—Å–ª–µ–¥–Ω—é—é –∞–∫—Ç–∏–≤–Ω—É—é —Å–µ—Å—Å–∏—é
    let latestSession = null;
    let latestTime = 0;
    
    for (const [email, session] of global.authSessions.entries()) {
      const sessionTime = new Date(session.timestamp).getTime();
      if (sessionTime > latestTime) {
        latestTime = sessionTime;
        latestSession = session;
      }
    }

    if (!latestSession) {
      return res.json({ 
        success: true, 
        user: null,
        message: "No active sessions found"
      });
    }

    console.log('üîç –ù–∞–π–¥–µ–Ω–∞ –∞–∫—Ç–∏–≤–Ω–∞—è —Å–µ—Å—Å–∏—è:', latestSession.email);

    // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ Supabase
    const { data, error } = await supabase
      .from("users")
      .select("*")
      .eq("email", latestSession.email)
      .single();

    if (error && error.code === "PGRST116") {
      return res.json({ 
        success: true, 
        user: null,
        session: latestSession,
        message: "User not found in database"
      });
    } else if (error) {
      throw error;
    }

    console.log('‚úÖ –î–∞–Ω–Ω—ã–µ —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', data);
    
    res.json({ 
      success: true, 
      user: data,
      session: latestSession,
      message: "Current user found"
    });

  } catch (err) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –≤ /current-user:', err);
    res.status(500).json({ 
      success: false, 
      error: err.message,
      details: "Failed to get current user"
    });
  }
});

// GET /get-user ‚Äî –ø–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ email
app.get("/get-user", async (req, res) => {
  try {
    const email = req.query.email;
    if (!email) return res.status(400).json({ error: "Email –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω" });

    const { data, error } = await supabase
      .from("users")
      .select("*")
      .eq("email", email)
      .single();

    if (error && error.code === "PGRST116") {
      return res.json({ success: true, user: null });
    } else if (error) {
      throw error;
    }

    res.json({ success: true, user: data });
  } catch (err) {
    res.status(500).json({ error: err.message });
  }
});

// GET /user-full-data ‚Äî –ø–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–ª–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å–æ –≤—Å–µ–º–∏ —Å–≤—è–∑–∞–Ω–Ω—ã–º–∏ —Ç–∞–±–ª–∏—Ü–∞–º–∏
app.get("/user-full-data", async (req, res) => {
  try {
    console.log('GET /user-full-data –∑–∞–ø—Ä–æ—Å');
    
    // –ü–æ–ª—É—á–∞–µ–º email –∏–∑ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –∏–ª–∏ –∏–∑ –∞–∫—Ç–∏–≤–Ω–æ–π —Å–µ—Å—Å–∏–∏
    let email = req.query.email;
    
    if (!email) {
      // –ï—Å–ª–∏ email –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω, –∏—â–µ–º –≤ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–µ—Å—Å–∏—è—Ö
      if (!global.authSessions) {
        return res.json({ 
          success: true, 
          user: null,
          message: "No email provided and no active sessions"
        });
      }

      // –ù–∞—Ö–æ–¥–∏–º –ø–æ—Å–ª–µ–¥–Ω—é—é –∞–∫—Ç–∏–≤–Ω—É—é —Å–µ—Å—Å–∏—é
      let latestSession = null;
      let latestTime = 0;
      
      for (const [sessionEmail, session] of global.authSessions.entries()) {
        const sessionTime = new Date(session.timestamp).getTime();
        if (sessionTime > latestTime) {
          latestTime = sessionTime;
          latestSession = session;
        }
      }

      if (!latestSession) {
        return res.json({ 
          success: true, 
          user: null,
          message: "No active sessions found"
        });
      }
      
      email = latestSession.email;
    }

    console.log('üîç –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', email);

    // 1. –ü–æ–ª—É—á–∞–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const { data: userData, error: userError } = await supabase
      .from("users")
      .select("*")
      .eq("email", email)
      .single();

    if (userError && userError.code === "PGRST116") {
      return res.json({ 
        success: true, 
        user: null,
        message: "User not found in database"
      });
    } else if (userError) {
      throw userError;
    }

    console.log('‚úÖ –û—Å–Ω–æ–≤–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ–ª—É—á–µ–Ω—ã');

    // 2. –ü–æ–ª—É—á–∞–µ–º –∫—É—Ä—Å—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const { data: userCourses, error: coursesError } = await supabase
      .from("user_courses")
      .select("*")
      .eq("user_id", userData.id);

    if (coursesError) {
      console.warn('‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫—É—Ä—Å–æ–≤:', coursesError);
    }

    // 3. –ü–æ–ª—É—á–∞–µ–º –ø–ª–∞—Ç–µ–∂–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const { data: userPayments, error: paymentsError } = await supabase
      .from("payments")
      .select("*")
      .eq("user_id", userData.id)
      .order("paid_at", { ascending: false });

    if (paymentsError) {
      console.warn('‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–ª–∞—Ç–µ–∂–µ–π:', paymentsError);
    }

    // 4. –ü–æ–ª—É—á–∞–µ–º —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–≥–¥–µ –æ–Ω –ø–æ–ª—É—á–∞—Ç–µ–ª—å)
    const { data: referralTransactions, error: transactionsError } = await supabase
      .from("referral_transactions")
      .select("*")
      .eq("referrer_id", userData.id)
      .order("transaction_date", { ascending: false });

    if (transactionsError) {
      console.warn('‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π:', transactionsError);
    }

    // 5. –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤ (–¥–µ—Ç–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è)
    const { data: referralHistory, error: historyError } = await supabase
      .from("referral_history")
      .select("*")
      .eq("referrer_id", userData.id)
      .order("transaction_date", { ascending: false });

    if (historyError) {
      console.warn('‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤:', historyError);
    }

    // 6. –ü–æ–ª—É—á–∞–µ–º —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –≥–¥–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —è–≤–ª—è–µ—Ç—Å—è –∏—Å—Ç–æ—á–Ω–∏–∫–æ–º
    const { data: userAsSourceTransactions, error: sourceTransactionsError } = await supabase
      .from("referral_transactions")
      .select("*")
      .eq("user_id", userData.id)
      .order("transaction_date", { ascending: false });

    if (sourceTransactionsError) {
      console.warn('‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –∫–∞–∫ –∏—Å—Ç–æ—á–Ω–∏–∫:', sourceTransactionsError);
    }

    // –§–æ—Ä–º–∏—Ä—É–µ–º –ø–æ–ª–Ω—ã–π –æ—Ç–≤–µ—Ç
    const fullUserData = {
      // –û—Å–Ω–æ–≤–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      ...userData,
      
      // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
      courses: userCourses || [],
      payments: userPayments || [],
      referral_transactions: referralTransactions || [],
      referral_history: referralHistory || [],
      user_transactions: userAsSourceTransactions || [],
      
      // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
      stats: {
        total_courses: (userCourses || []).length,
        total_payments: (userPayments || []).length,
        total_referral_transactions: (referralTransactions || []).length,
        total_referral_history: (referralHistory || []).length,
        completed_payments: (userPayments || []).filter(p => p.status === 'completed').length,
        pending_payments: (userPayments || []).filter(p => p.status === 'pending').length,
        total_referral_earnings: (referralTransactions || []).reduce((sum, t) => sum + parseFloat(t.amount || 0), 0),
      }
    };

    console.log('üéâ –ü–æ–ª–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å–æ–±—Ä–∞–Ω—ã:', {
      email: userData.email,
      courses: fullUserData.courses.length,
      payments: fullUserData.payments.length,
      referral_transactions: fullUserData.referral_transactions.length,
      referral_history: fullUserData.referral_history.length
    });

    res.json({ 
      success: true, 
      user: fullUserData,
      message: "Full user data retrieved successfully"
    });

  } catch (err) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –≤ /user-full-data:', err);
    res.status(500).json({ 
      success: false, 
      error: err.message,
      details: "Failed to get full user data"
    });
  }
});

app.listen(process.env.PORT || 3000, () => {
  console.log("üöÄ Server –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É " + (process.env.PORT || 3000));
});
